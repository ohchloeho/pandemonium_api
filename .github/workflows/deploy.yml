name: Pandemonium API CI/CD

on:
  push:
    branches:
      - main
      - test  # Include test branch for running build and tests only

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build Docker image
        run: |
          docker build -t pandemonium_api .

      - name: Log in to Docker Hub (optional, if you want to push to Docker Hub)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub (optional)
        run: |
          docker tag pandemonium_api ${{ secrets.DOCKER_USERNAME }}/pandemonium_api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/pandemonium_api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Install Tailscale
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh
          sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }}

      # Ensure Tailscale is connected before proceeding
      - name: Verify Tailscale connection
        run: |
          sudo tailscale status

      # SSH into the server and run the Docker commands
      - name: Deploy Docker container to Server via SSH (Tailscale)
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_TAILSCALE_IP }}  # Use the Tailscale IP of your server
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Log in to Docker (if using a private registry like Docker Hub)
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

            # Pull the latest Docker image (optional if you use Docker Hub)
            docker pull ${{ secrets.DOCKER_USERNAME }}/pandemonium_api:latest

            # Stop the currently running container (if it exists)
            docker stop pandemonium_api || true
            docker rm pandemonium_api || true

            # Run the new Docker container
            docker run -d --name pandemonium_api -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/pandemonium_api:latest
